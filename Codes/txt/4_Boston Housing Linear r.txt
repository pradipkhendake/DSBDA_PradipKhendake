'''
Data Analytics I
Create a Linear Regression Model using Python/R to predict home prices using Boston Housing
Dataset (https://www.kaggle.com/c/boston-housing). The Boston Housing dataset contains
information about various houses in Boston through different parameters. There are 506 samples
and 14 feature variables in this dataset.
The objective is to predict the value of prices of the house using the given features.'''
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt  
# Create a Dataframe with Dependent Variable(x) and independent variable y. 
x=np.array([95,85,80,70,60]) 
y=np.array([85,95,70,65,70])

#Create Linear Regression Model using Polyfit Function
model= np.polyfit(x, y, 1)
model
#Predict the Y value for X and observe the output. 
predict = np.poly1d(model) 
predict(65) 
#Predict the y_pred for all values of x. 
y_pred= predict(x) 
y_pred 

#Evaluate the performance of Model (R-Suare) R squared calculation is not implemented in numpy... so that one should be borrowed
 
from sklearn.metrics import r2_score 
r2_score(y, y_pred)

#Now plotting the regression model: 
y_line = model[1] + model[0]* x 
plt.plot(x, y_line, c = 'r') 
plt.scatter(x, y_pred) 
plt.scatter(x,y,c='r') 
plt.show()

#Boston dataset  
#Import the california Housing dataset 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

california = fetch_california_housing()
data = pd.DataFrame(california.data, columns=california.feature_names)
data['PRICE'] = california.target
data.head()

data.isnull().sum()

x = data.drop(['PRICE'], axis=1)
y = data['PRICE']

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=0)

model = LinearRegression()
model.fit(xtrain, ytrain)

ytrain_pred = model.predict(xtrain)
ytest_pred = model.predict(xtest)

print("Train MSE:", mean_squared_error(ytrain, ytrain_pred))
print("Test MSE:", mean_squared_error(ytest, ytest_pred))
print("Train R2:", r2_score(ytrain, ytrain_pred))
print("Test R2:", r2_score(ytest, ytest_pred))

plt.scatter(ytrain, ytrain_pred, c='blue', marker='o', label='Training data')
plt.scatter(ytest, ytest_pred, c='lightgreen', marker='s', label='Test data')
plt.xlabel('True values')
plt.ylabel('Predicted values')
plt.title('True vs Predicted Housing Prices')
plt.legend(loc='upper left')
plt.plot()
plt.show()

